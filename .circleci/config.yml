version: 2.1

orbs:
  docker: ledger/docker@volatile
  codecov: codecov/codecov@1.0.2

aliases:
  - &filter_all_tags
    tags:
      only: /.*/
  - &dependencies_cache
    keys:
      - wallet-daemon-{{ .Branch }}-{{ checksum "build.sbt" }}
      - wallet-daemon-{{ .Branch }}-
      - wallet-daemon-
  - &wait_compose_healthy
    name: Wait for all service dependencies to become healthy
    command: |
      for try in {1..10}; do
        sleep 30
        if [ "$(docker ps --filter 'name=ci_' --filter 'health=unhealthy' --filter 'health=starting' --format '{{.Names}}')" = "" ]; then
          docker-compose -f $docker_compose_config -p ci ps
          exit 0
        fi
        docker-compose -f $docker_compose_config -p ci ps
        echo
      done
      echo "Error : some service dependencies are not healthy at the end of the timeout" >&2
      exit 1

jobs:
  compile:
    docker:
      - image: ledgerhq/sbt-openjdk-8
        environment:
          JVM_OPTS: -Xmx3200m
          TERM: dumb
    steps:
      - checkout
      - restore_cache: *dependencies_cache
      - run:
          name: Compile
          command: sbt -Dsbt.ivy.home=.ivy2 -sbt-dir .sbt compile test:compile it:compile
      - save_cache:
          paths:
            - target
            - project/target
            - .ivy2
            - .sbt
          key: wallet-daemon-{{ .Branch }}-{{ checksum "build.sbt" }}
      - persist_to_workspace:
          root: /root/project
          paths:
            - .ivy2
            - .sbt

  scala_linter:
    docker:
      - image: ledgerhq/sbt-openjdk-8
    steps:
      - checkout
      - restore_cache: *dependencies_cache
      - run:
          name: Run scalastyle
          command: sbt -Dsbt.ivy.home=.ivy2 -sbt-dir .sbt scalastyle

  integration_tests:
    docker:
      - image: ledgerhq/sbt-openjdk-8
      - image: ledgerhq/walletdaemon-squid:3.5.27-2
      - image: postgres:11.6
        environment:
          POSTGRES_DB: postgres
          POSTGRES_USER: ledger
          POSTGRES_PASSWORD: ledger_secret
        command: -c "ssl=on" -c "ssl_key_file=/etc/ssl/private/ssl-cert-snakeoil.key" -c "ssl_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem" -c max_connections=200
      - image: rabbitmq:3
        environment:
          RABBITMQ_VM_MEMORY_HIGH_WATERMARK: 512MiB
      - image: redis
    resource_class: large
    steps:
      - checkout
      - restore_cache: *dependencies_cache
      - run:
          name: Installing Dependencies
          command: apt-get update && apt-get install -y postgresql-client netcat
      - run:
          name: Waiting for Postgres to be ready
          command: tooling/network/waitForService.sh 0.0.0.0 5432
      - run:
          name: Waiting for RabbitMQ to be ready
          command: tooling/network/waitForService.sh 0.0.0.0 5672
      - run:
          name: Create databases for test
          command: tooling/database/postgres/dbs.sh 0.0.0.0 5432 ledger ledger_secret wdtest_
          environment:
            PGPASSWORD: ledger_secret
      - run:
          name: Run integration tests and code coverage
          command: sbt -Dsbt.ivy.home=.ivy2 -sbt-dir .sbt clean coverage it:test coverageReport
          environment:
            WALLET_PROXY_ENABLED: 'true'
            WALLET_PROXY_HOST: 0.0.0.0
            WALLET_PROXY_PORT: 3128
            DATABASE_ENGINE: postgres
            CORE_DATABASE_ENGINE: postgres
            CORE_PG_HOST: 0.0.0.0
            CORE_PG_PORT: 5432
            CORE_PG_USER: ledger
            CORE_PG_PWD: ledger_secret
            CORE_PG_DB_NAME_PREFIX: wdtest_
            CORE_PG_CONNECTION_POOL_SIZE_PER_WALLET_POOL: 1
            RABBITMQ_URI: "amqp://guest:guest@0.0.0.0:5672"
            SBT_OPTS: -Xmx1g -XX:MaxMetaspaceSize=512M
      - codecov/upload:
          file: target/scala-2.12/coverage-report/cobertura.xml

  test_image:
    description: Enforce compliance tests on the Docker image with the goss framework
    executor: docker/machine-executor
    parameters:
      docker_compose_configuration:
        description: |
          Name of the docker-compose configuration file used to setup an environment powering the
          service dependencies. The file is expected to be stored alongside the CircleCI configuration
          config.yml.
        type: string
        default: ""
      docker_compose_env_vars:
        description: Environment variables to pass to docker-compose
        type: string
        default: ""
      docker_compose_single_use:
        description: |
          The dgoss tool is run twice : once to get human-readable output and a second time
          to get JUnit output that can be parsed by CircleCI.
          Some applications may be not re-run twice from scratch because there is some persistent
          state stored in a database.
          If true, the docker-compose environment powering the service dependencies will be reset
          before the second dgoss execution.
        type: boolean
        default: false
      goss_version:
        description: goss version to install
        type: string
        default: v0.3.14
      dgoss_docker_env_vars:
        description: Environment variables that dgoss should provide to the container
        type: string
        default: ""
      goss_sleep:
        description: Time to sleep after running container (and optionally goss_wait.yaml) and before running tests
        type: string
        default: 1s
      docker_project_name:
        description:
          Name of the project to build
        type: string
        default: ""
    steps:
      - docker/set_image_name_env_vars:
          docker_project_name: << parameters.docker_project_name >>
      - docker/load_image
      - checkout
      - when:
          condition: << parameters.docker_compose_configuration >>
          steps:
            - when:
                condition: << parameters.docker_compose_env_vars >>
                steps:
                  - run:
                      name: Set environment variables read by docker-compose
                      # '<<' must be escaped in v2.1+
                      # https://discuss.circleci.com/t/2-1-config-and-build-processing/24102/31
                      command: |
                        cat > .env \<< EOF
                        << parameters.docker_compose_env_vars >>
                        EOF
            - run:
                name: Display docker-compose configuration
                command: |
                  # eval is needed for the CIRCLE_WORKING_DIRECTORY variable as it contains a non-expanded '~'
                  eval docker_compose_config=${CIRCLE_WORKING_DIRECTORY}/.circleci/<< parameters.docker_compose_configuration >>
                  echo "export docker_compose_config='$docker_compose_config'" >> $BASH_ENV
                  docker-compose -f $docker_compose_config -p ci config
      - when:
          condition: << parameters.dgoss_docker_env_vars >>
          steps:
            - run:
                name: Set docker test environment variables
                command: |
                  cat > docker.env \<< EOF
                  << parameters.dgoss_docker_env_vars >>
                  EOF
                  echo "export docker_opts='${docker_opts:-} --env-file docker.env'" >> $BASH_ENV
      - when:
          condition: << parameters.docker_compose_configuration >>
          steps:
            - docker/docker_login
            - run:
                name: Setup docker-compose environment powering service dependencies
                command: |
                  docker-compose -f $docker_compose_config -p ci up -d
                  # The default bridge network created by docker-compose is named "<project name>_default"
                  echo "export docker_opts='${docker_opts:-} --network ci_default'" >> $BASH_ENV
            - run: *wait_compose_healthy
      - run:
          name: Run wallet-daemon service
          command: |
            echo "Executing service run with the following arguments :" $docker_opts
            docker run -d $docker_opts -p 9200:9200 ${DOCKER_NAMESPACE}/${PROJECT_NAME}:${CIRCLE_SHA1}
      - run:
          name: Check wallet-daemon service
          command: |
            # look like the loop does not work
            # sleep 30 was not enough for the wd to be up
            sleep 90
            status=$(curl http://0.0.0.0:9200/_health -w "%{http_code}\n" -o junk 2> /dev/null)
            case $status in
              000) echo "Wallet daemon not ready yet. Retry 30 seconds later" ;;
              200) echo "Wallet daemon service is up !"; break ;;
                *) echo "Wallet daemon returns status $status (GET http://0.0.0.0:9200/_health)." ; exit 1 ;;
            esac

workflows:
  build_test_and_publish:
    jobs:
      - compile:
          filters: *filter_all_tags
      - scala_linter:
          filters: *filter_all_tags
      - integration_tests:
          requires:
            - compile
          filters: *filter_all_tags
      - docker/build_image:
          requires:
            - compile
          after_checkout:
            - attach_workspace:
                at: /home/circleci/project
            - run:
                name: Set version environment variable
                command: echo "export COMMIT_HASH=$(git rev-parse HEAD)" >> $BASH_ENV
            - docker/set_docker_tag_env_var
          docker_build_args:
            --build-arg docker_tag=$DOCKER_TAG
          filters: *filter_all_tags
      - test_image:
          requires:
            - docker/build_image
          docker_compose_configuration: test_image_env.yml
          docker_compose_env_vars: |-
            CORE_PG_HOST=postgres
            CORE_PG_USER=postgres
            CORE_PG_PWD=ledger_secret
          dgoss_docker_env_vars: |-
            RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672
            CORE_PG_HOST=postgres
            CORE_PG_USER=postgres
            CORE_PG_PWD=ledger_secret
            WALLET_DAEMON_DATABASE_ENGINE=sqlite3
            CORE_DATABASE_ENGINE=sqlite3
          filters: *filter_all_tags

      - docker/publish_image:
          context: githubpkg
          requires:
            - test_image
          filters:
            branches:
              only:
                - master
                - master-drop2
                - develop
                - develop-drop2
                - release_candidate
                - release_candidate_drop2
                - /coin\/.*/
            tags:
              only: /.*/
